
db.createCollection( 'users', {validator: {$jsonSchema: {bsonType: 'object',title:'users',required: [         'displayName',          'displayId',          'type',          'ownerAccount'],properties: {displayName: {bsonType: 'string'},displayId: {bsonType: 'string'},profile: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'},type: {enum: ["people","page","guest"]},ownerAccount: {bsonType: 'objectId'}}         }      }});  
db.createCollection( 'contents', {validator: {$jsonSchema: {bsonType: 'object',title:'contents',required: [         'payload',          'author',          'revisionCount'],properties: {type: {enum: ["post","blog","recast","quote"]},payload: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'},author: {bsonType: 'object'},engagements: {bsonType: 'object'},hashtags: {bsonType: 'array'},revisionCount: {bsonType: 'int'}}         }      }});  
db.createCollection( 'engagements', {validator: {$jsonSchema: {bsonType: 'object',title:'engagements',required: [         'user',          'targetRef',          'createAt',          'updateAt',          'target',          'type'],properties: {user: {bsonType: 'objectId'},targetRef: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'},target: {bsonType: 'object'},type: {enum: ["like","recast","quote","comment"]}}         }      }});  
db.createCollection( 'comments', {validator: {$jsonSchema: {bsonType: 'object',title:'comments',required: [         'message',          'author',          'engagements',          'hashtags',          'revisionCount'],properties: {message: {bsonType: 'string'},author: {bsonType: 'object'},engagements: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'},hashtags: {bsonType: 'string'},revisionCount: {bsonType: 'int'}}         }      }});  
db.createCollection( 'relationships', {validator: {$jsonSchema: {bsonType: 'object',title:'relationships',required: [         'followedUser',          'user'],properties: {followedUser: {bsonType: 'array'},user: {bsonType: 'objectId'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'revisions', {validator: {$jsonSchema: {bsonType: 'object',title:'revisions',required: [         'objectRef',          'payload'],properties: {objectRef: {bsonType: 'object'},payload: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'feedItems', {validator: {$jsonSchema: {bsonType: 'object',title:'feedItems',required: [         'circle',          'content',          'feature',          'aggregator',          'score',          'account'],properties: {circle: {bsonType: 'string'},content: {bsonType: 'object'},feature: {bsonType: 'string'},aggregator: {bsonType: 'object'},score: {bsonType: 'int'},account: {bsonType: 'objectId'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'circles', {validator: {$jsonSchema: {bsonType: 'object',title:'circles',required: [         'slug',          'name',          'type'],properties: {slug: {bsonType: 'string'},name: {bsonType: 'string'},type: {enum: ["default","topic"]},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'accounts', {validator: {$jsonSchema: {bsonType: 'object',title:'accounts',required: [         'preferences'],properties: {email: {bsonType: 'string'},password: {bsonType: 'string'},activateDate: {bsonType: 'date'},preferences: {bsonType: 'object'},user: {bsonType: 'object'},mobile: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'},credentials: {bsonType: 'array'}}         }      }});  
db.createCollection( 'accountActivations', {validator: {$jsonSchema: {bsonType: 'object',title:'accountActivations',required: [         'account',          'verifyToken',          'verfiyTokenExpireDate',          'type',          'createAt',          'updateAt'],properties: {account: {bsonType: 'objectId'},verifyToken: {bsonType: 'string'},verfiyTokenExpireDate: {bsonType: 'date'},type: {enum: ["email","mobile"]},activationDate: {bsonType: 'date'},revocationDate: {bsonType: 'date'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'accountAuthenIds', {validator: {$jsonSchema: {bsonType: 'object',title:'accountAuthenIds',required: [         'type',          'externalId',          'account'],properties: {type: {enum: ["facebook","telegram","google"]},externalId: {bsonType: 'string'},account: {bsonType: 'objectId'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'features', {validator: {$jsonSchema: {bsonType: 'object',title:'features',required: [         'slug',          'name'],properties: {slug: {bsonType: 'string'},name: {bsonType: 'string'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'credentials', {validator: {$jsonSchema: {bsonType: 'object',title:'credentials',required: [         'account',          'accessToken',          'refreshToken',          'accessTokenExpireDate',          'refreshTokenExpireDate',          'device',          'platform',          'deviceUUID'],properties: {account: {bsonType: 'object'},accessToken: {bsonType: 'string'},refreshToken: {bsonType: 'string'},accessTokenExpireDate: {bsonType: 'date'},refreshTokenExpireDate: {bsonType: 'date'},device: {bsonType: 'string'},platform: {bsonType: 'string'},deviceUUID: {bsonType: 'string'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'I18N', {validator: {$jsonSchema: {bsonType: 'object',title:'I18N',required: [         'objectRef',          'tag',          'value'],properties: {objectRef: {bsonType: 'object'},tag: {bsonType: 'string'},value: {bsonType: 'string'},createDate: {bsonType: 'date'},updateDate: {bsonType: 'date'}}         }      }});  
db.createCollection( 'hashtags', {validator: {$jsonSchema: {bsonType: 'object',title:'hashtags',required: [         'tag',          'score',          'aggregator'],properties: {tag: {bsonType: 'string'},score: {bsonType: 'int'},aggregator: {bsonType: 'object'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'hashtagItems', {validator: {$jsonSchema: {bsonType: 'object',title:'hashtagItems',required: [         'objectRef',          'payload',          'hashtag'],properties: {objectRef: {bsonType: 'object'},payload: {bsonType: 'object'},hashtag: {bsonType: 'objectId'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  
db.createCollection( 'archiveHashtags', {validator: {$jsonSchema: {bsonType: 'object',title:'archiveHashtags',required: [         'hashtags',          'fromDate',          'toDate'],properties: {hashtags: {bsonType: 'array'},fromDate: {bsonType: 'date'},toDate: {bsonType: 'date'},createAt: {bsonType: 'date'},updateAt: {bsonType: 'date'}}         }      }});  